framework:
    rate_limiter:
        ui_login: # username + IP address
            policy: sliding_window
            limit: '%env(int:login_throttling_ui_limit)%'
            interval: '%env(login_throttling_interval)%'

        ip_login: # IP address
            policy: sliding_window
            limit: '%env(int:login_throttling_ip_limit)%'
            interval: '%env(login_throttling_interval)%'

services:
    mosparo.login_rate_limiter:
        class: Symfony\Component\Security\Http\RateLimiter\DefaultLoginRateLimiter
        arguments:
            $globalFactory: '@limiter.ip_login'
            $localFactory: '@limiter.ui_login'
            $secret: '%kernel.secret%'

security:
    access_decision_manager:
        strategy: unanimous

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        mosparo_user_provider:
            entity:
                class: Mosparo\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        resources:
            pattern: ^/resources/(.*)
            security: false
        health:
            pattern: ^/health$
            security: false
        setup:
            pattern: ^/(setup|upgrade)/(.*)
            security: false
        api:
            pattern: ^/api/(.*)
            security: false
        main:
            lazy: true
            provider: mosparo_user_provider
            form_login:
                login_path: security_login
                check_path: security_login
                default_target_path: project_list_root
            logout:
                path: security_logout
                csrf_parameter: token
                csrf_token_manager: security.csrf.token_manager
            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check

            login_throttling:
                limiter: mosparo.login_rate_limiter

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" }
        - { path: ^/password, roles: PUBLIC_ACCESS, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" }
        - { path: ^/administration/update/finalize, roles: PUBLIC_ACCESS, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" }
        - { path: ^/cron-jobs/execute, roles: PUBLIC_ACCESS }
        - { path: ^/project/create, roles: ROLE_CAN_CREATE_PROJECTS, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" } # Covers also the wizard
        - { path: ^/administration, roles: ROLE_ADMIN, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" }
        - { path: ^/, roles: ROLE_USER, allow_if: "ip_on_allow_list_security(request.getClientIp(), '%env(backend_access_ip_allow_list)%')" }

    role_hierarchy:
        ROLE_ADMIN: ROLE_CAN_CREATE_PROJECTS

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
