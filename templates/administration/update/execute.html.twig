{% extends 'small.html.twig' %}

{% trans_default_domain 'mosparo' %}

{% block documentTitle %}{{ 'administration.update.execute.title'|trans }} - {{ parent() }}{% endblock %}

{% block small_body %}
    <h2 class="card-title text-center mb-4">{{ 'administration.update.execute.title'|trans }}</h2>

    <div class="alert alert-info update-alert alert-in-progress" role="alert">
        <div class="d-flex align-items-center">
            <div>
                <i class="update-loader"></i>
            </div>
            <div>
                {{ 'administration.update.execute.description'|trans }}
            </div>
        </div>
    </div>
    <div class="alert alert-success update-alert alert-update-completed d-none" role="alert">
        <div class="d-flex align-items-center">
            <div>
                <i class="ti ti-check icon alert-icon"></i>
            </div>
            <div>
                {{ 'administration.update.execute.message.successfullyUpdated'|trans }}
            </div>
        </div>
    </div>
    <div class="alert alert-danger update-alert alert-update-error d-none" role="alert">
        <div class="d-flex align-items-center">
            <div>
                <i class="ti ti-x icon alert-icon"></i>
            </div>
            <div>
                {{ 'administration.update.execute.message.updateError'|trans }}
            </div>
        </div>
    </div>

    <p>
        {{ 'administration.update.execute.description'|trans }}
    </p>

    <div class="row mb-3">
        <div class="col-6">
            <h4 class="mb-0">
                {{ 'administration.update.installedVersion'|trans }}
            </h4>
            <div>
                {{ mosparoVersion }}
            </div>
        </div>
        <div class="col-6">
            <h4 class="mb-0">
                {{ 'administration.update.availableVersion'|trans }}
            </h4>
            <div>
                {{ availableUpdateData.number }}
            </div>
        </div>
    </div>

    <h4>{{ 'administration.update.execute.log'|trans }}</h4>
    <div class="update-log">
        <ul class="update-log-list">
        </ul>
    </div>

    <div class="form-footer d-none">
        <a href="{{ path('administration_update_finalize') }}" class="btn btn-primary w-100">
            {{ 'setup.buttons.continue'|trans }}
            <i class="ti ti-icon-right ti-chevron-right"></i>
        </a>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% cspscript %}
        <script>
            var lastResponseText = '';
            var lastMessageTimestamp = 0;
            var isRunning = true;

            function calculateCheckInterval()
            {
                let timestampNow = (new Date()).getTime() / 1000;
                let diff = timestampNow - lastMessageTimestamp;

                if (diff < 1) {
                    return 250;
                } else if (diff < 2) {
                    return 500;
                } else if (diff < 5) {
                    return 1000;
                } else {
                    return 2000;
                }
            }

            function extractNewMessage(responseText)
            {
                let newData = responseText.substring(lastResponseText.length).trim();

                lastResponseText = responseText;

                return newData.split("\n");
            }

            function markRunningAsCompleted(type)
            {
                let runningEl = $('.update-log-list .running');
                let iconEl = runningEl.find('.update-loader');

                runningEl.removeClass('running');
                iconEl.removeClass('update-loader');

                if (type === 'completed') {
                    runningEl.addClass('completed');
                    iconEl.addClass('ti ti-check');
                } else if (type === 'error') {
                    runningEl.addClass('error');
                    iconEl.addClass('ti ti-x');
                }
            }

            function processMessage(message)
            {
                if (message.trim() === '') {
                    return;
                }
                message = JSON.parse(message);

                lastMessageTimestamp = message.timestamp;

                if (message.inProgress) {
                    markRunningAsCompleted('completed');
                    let statusItem = $('<li></li>').addClass('running');

                    $('<i></i>').addClass('update-loader').appendTo(statusItem);
                    $('<div></div>').text(message.message).appendTo(statusItem);

                    $('.update-log-list').append(statusItem);
                } else {
                    isRunning = false;

                    if (message.error) {
                        markRunningAsCompleted('error');

                        let statusItem = $('<li></li>').addClass('error').text(message.message);
                        $('.update-log-list').append(statusItem);

                        $('.alert-in-progress').addClass('d-none');
                        $('.alert-update-error').removeClass('d-none');
                    } else {
                        markRunningAsCompleted('completed');
                        $('.form-footer').removeClass('d-none');

                        $('.alert-in-progress').addClass('d-none');
                        $('.alert-update-completed').removeClass('d-none');
                    }
                }
            }

            function checkLogFile()
            {
                jQuery.ajax({
                    type: 'GET',
                    url: '{{ temporaryLogFileUrl }}',
                    success: function (responseText) {
                        let newMessages = extractNewMessage(responseText);

                        for (let index in newMessages) {
                            processMessage(newMessages[index]);
                        }

                        if (isRunning) {
                            setTimeout(checkLogFile, calculateCheckInterval());
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        if (xhr.status === 404) {
                            // Ignore the 404 error, which can occur until the update process has created the file.
                            setTimeout(checkLogFile, calculateCheckInterval());
                        } else {
                            isRunning = false;

                            markRunningAsCompleted('error');

                            let statusItem = $('<li></li>').addClass('error').text(textStatus + '(' + xhr.status + ')');
                            $('.update-log-list').append(statusItem);

                            $('.alert-in-progress').addClass('d-none');
                            $('.alert-update-error').removeClass('d-none');
                        }
                    },
                })
            }

            setTimeout(checkLogFile, 250);

            $.get('{{ path('administration_update_execute_update') }}', function (response) {
                if (typeof response.error !== 'undefined' && response.error) {
                    isRunning = false;

                    markRunningAsCompleted('error');

                    let statusItem = $('<li></li>').addClass('error').text(response.errorMessage);
                    $('.update-log-list').append(statusItem);

                    $('.alert-in-progress').addClass('d-none');
                    $('.alert-update-error').removeClass('d-none');
                }
            });
        </script>
    {% endcspscript %}
{% endblock %}
